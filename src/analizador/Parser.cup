// ------------  Paquete e importaciones ------------
package analizador;

import java_cup.runtime.*;
import java.util.LinkedList;

//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            if(s.value != null)
                Util.Reports.agregarTokenErr("No se espera: "+ s.value, "error sintactico", s.right, s.left);  
                System.err.println("Error Sintactico: no se espera "+ s.value.toString() + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String EXCL, PARDER, PARIZQ, PYC;
terminal String ENTERO, CADENA, ID, DECIMAL;
terminal String COMA, IGUAL;
terminal String MAS,VAR, DOUBLEVAR, DOSP, MENORQ, END, GUION, PROGRAM, ENDPROGRAM, MAYORQ; 
terminal String CHARVAR, CORIZQ, CORDER, ARR, IDARR;
terminal String SUMA, RESTA, MULTI, DIV, MOD;
terminal String MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN, PRINT, CONSOLE, COLUMN;
terminal String GRAPHPIE, TITULO, LABEL, VALUES, EXEC, GRAPPIE, GRAPBAR, GRAPHBAR; 
terminal String EJEX, EJEY, TITX, TITY, GRAPHLINE, GRAPLINE, HISTOGRAM;

//------> Declaración de no terminales
non terminal inicio;
non terminal listainstr,  listaValores;
non terminal instruccion, expresion, operaciones, funciones, graficas;
non terminal printN, variable, valor, imp, arrays, parametros;

//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------

inicio ::= PROGRAM listainstr ENDPROGRAM
;

listainstr ::= listainstr instruccion
    | instruccion
;

instruccion ::= printN
    | variable
    |funciones
    |graficas
    | error PYC
;


//Para graficar

graficas ::= GRAPHPIE PARIZQ parametros  PARDER END PYC {: Graficas.Grafica.Pie(); :}
            |GRAPHBAR PARIZQ parametros PARDER END PYC {: Graficas.Grafica.Barras(); :}
            |GRAPHLINE PARIZQ parametros PARDER END PYC {: Graficas.Grafica.Linea(); :}
            |HISTOGRAM PARIZQ parametros PARDER END PYC {: Graficas.Grafica.Histograma(); :}
;


parametros ::= LABEL DOSP DOSP CHARVAR CORIZQ CORDER IGUAL CORIZQ listaValores:val CORDER END PYC parametros {: Graficas.Grafica.agregarOActualizar("label", val); :}
             | VALUES DOSP DOSP DOUBLEVAR IGUAL CORIZQ listaValores:val CORDER END PYC parametros {: Graficas.Grafica.agregarOActualizar("values", val); :}
             | TITULO DOSP DOSP CHARVAR CORIZQ CORDER IGUAL expresion:val END PYC parametros {: Graficas.Grafica.agregarOActualizar("titulo", val); :}
             | EJEX DOSP DOSP CHARVAR CORIZQ CORDER IGUAL CORIZQ listaValores: val CORDER END PYC parametros {: Graficas.Grafica.agregarOActualizar("ejeX", val); :}
             | EJEY DOSP DOSP DOUBLEVAR IGUAL CORIZQ listaValores: val CORDER END PYC parametros {: Graficas.Grafica.agregarOActualizar("ejeY", val); :}
             | TITX DOSP DOSP CHARVAR CORIZQ CORDER IGUAL expresion:val END PYC parametros {: Graficas.Grafica.agregarOActualizar("tituloX", val); :}
             | TITY DOSP DOSP CHARVAR CORIZQ CORDER IGUAL expresion:val END PYC parametros {: Graficas.Grafica.agregarOActualizar("tituloY", val); :}
             
             | LABEL DOSP DOSP CHARVAR CORIZQ CORDER IGUAL listaValores:val END PYC  {: Graficas.Grafica.agregarOActualizar("label", val); :}
             | VALUES DOSP DOSP DOUBLEVAR IGUAL listaValores:val END PYC             {: Graficas.Grafica.agregarOActualizar("values", val); :}
             | TITULO DOSP DOSP CHARVAR CORIZQ CORDER IGUAL expresion:val END PYC    {: Graficas.Grafica.agregarOActualizar("titulo", val); :}
             | EJEX DOSP DOSP CHARVAR CORIZQ CORDER IGUAL CORIZQ listaValores: val CORDER END PYC  {: Graficas.Grafica.agregarOActualizar("ejeX", val); :}
             | EJEY DOSP DOSP DOUBLEVAR IGUAL CORIZQ listaValores: val CORDER END PYC  {: Graficas.Grafica.agregarOActualizar("ejeY", val); :}
             | TITX DOSP DOSP CHARVAR CORIZQ CORDER IGUAL expresion:val END PYC  {: Graficas.Grafica.agregarOActualizar("tituloX", val); :}
             | TITY DOSP DOSP CHARVAR CORIZQ CORDER IGUAL expresion:val END PYC  {: Graficas.Grafica.agregarOActualizar("tituloY", val); :}
             | EXEC GRAPHBAR END PYC
             | EXEC GRAPHPIE END PYC
             | EXEC GRAPHLINE END PYC
             | EXEC HISTOGRAM END PYC
;

//Para imprimer en consola

printN ::= CONSOLE DOSP DOSP PRINT IGUAL imp:val  END PYC    {: Util.Instruction.Print(val); :} 
          |CONSOLE DOSP DOSP COLUMN IGUAL expresion:var GUION MAYORQ arrays:val  END PYC    {: Util.Instruction.PrintArr(val, var.toString()); :}
     
; 

//Asignaciones de variales
variable ::= VAR DOSP DOUBLEVAR DOSP DOSP  ID:var MENORQ GUION expresion:val END PYC     
    {:Util.Instruction.tablaVariables.put(var.toString(), val.toString());  :}
    | VAR DOSP CHARVAR CORIZQ CORDER DOSP DOSP ID:var MENORQ GUION expresion:val END PYC
      {:Util.Instruction.tablaVariables.put(var.toString(), val.toString()); :}
    | ARR DOSP DOUBLEVAR DOSP DOSP IDARR:var MENORQ GUION CORIZQ listaValores:val CORDER END PYC
      {:Util.Instruction.tablaVariables.put(var.toString(), (LinkedList<Double>)  val);:}
    | ARR DOSP DOUBLEVAR DOSP DOSP IDARR:var MENORQ GUION  expresion:val END PYC
      {:Util.Instruction.tablaVariables.put(var.toString(), (LinkedList<Double>)  val);:}
    | ARR DOSP CHARVAR CORIZQ CORDER DOSP DOSP IDARR:var MENORQ GUION CORIZQ listaValores:val CORDER END PYC
      {:Util.Instruction.tablaVariables.put(var.toString(), (LinkedList<String>) val);:}
    | ARR DOSP CHARVAR CORIZQ CORDER DOSP DOSP IDARR:var MENORQ GUION  expresion:val  END PYC
      {:Util.Instruction.tablaVariables.put(var.toString(), (LinkedList<String>) val);:}
    | VAR DOSP DOUBLEVAR DOSP DOSP ID:var MENORQ GUION operaciones:val END PYC
      {:Util.Instruction.tablaVariables.put(var.toString(), val.toString() );:}
    | VAR DOSP DOUBLEVAR DOSP DOSP ID:var MENORQ GUION funciones:val END PYC
      {:Util.Instruction.tablaVariables.put(var.toString(), val.toString() );:}
;


//funciones de estadistica

funciones ::= MEDIA PARIZQ CORIZQ listaValores:val CORDER PARDER {: RESULT = Util.Estadistica.Media(val); :}
            | MEDIANA PARIZQ CORIZQ listaValores:val CORDER PARDER {: RESULT = Util.Estadistica.Mediana(val); :}
            | MODA PARIZQ CORIZQ listaValores:val CORDER PARDER {: RESULT = Util.Estadistica.Moda(val); :}
            | VARIANZA PARIZQ CORIZQ listaValores:val CORDER PARDER {: RESULT = Util.Estadistica.Varianza(val); :}
            | MAX PARIZQ CORIZQ listaValores:val CORDER PARDER {: RESULT = Util.Estadistica.Max(val); :}
            | MIN PARIZQ CORIZQ listaValores:val CORDER PARDER {: RESULT = Util.Estadistica.Min(val); :}
            | MEDIA PARIZQ  expresion:val  PARDER {: RESULT = Util.Estadistica.Media(val); :}
            | MEDIANA PARIZQ  expresion:val  PARDER {: RESULT = Util.Estadistica.Mediana(val); :}
            | MODA PARIZQ  expresion:val  PARDER {: RESULT = Util.Estadistica.Moda(val); :}
            | VARIANZA PARIZQ  expresion:val  PARDER {: RESULT = Util.Estadistica.Varianza(val); :}
            | MAX PARIZQ  expresion:val  PARDER {: RESULT = Util.Estadistica.Max(val); :}
            | MIN PARIZQ  expresion:val  PARDER {: RESULT = Util.Estadistica.Min(val); :}
;


//Usado para los arrays
listaValores ::=  expresion:val COMA listaValores:resto
               {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               :}
    
    | operaciones:val COMA listaValores:resto
                {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               :}
    | funciones:val COMA listaValores:resto
                {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               :}

    | expresion:val
               {:
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               :}
    | operaciones:val                 {:
                  LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               :}
    | funciones:val
                {:
                  LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               :}
;

//Usado para la impresion de arrays

    arrays::= IDARR:val {: RESULT = Util.Instruction.tablaVariables.get(val.toString()); :}
             |CORIZQ listaValores:val CORDER {: RESULT = val; :}
        
;



//No terminal de las expresiones utilizadas para la declaracion de variables y de arryas 
expresion ::= ENTERO:val    {: RESULT = val.toString(); :}
        | CADENA: val       {: RESULT = val.toString(); :}
        | DECIMAL:val       {: RESULT = val.toString(); :}
        | ID:val            {: RESULT = Util.Instruction.tablaVariables.get(val.toString()); :}
        | IDARR:val            {: RESULT = Util.Instruction.tablaVariables.get(val); :}
           
;




//tiene las operaciones aritmeticas completas scon las anidaciones que pueden haber 

operaciones ::=SUMA PARIZQ operaciones:val1 COMA operaciones:val2 PARDER {: RESULT = Util.Operations.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | RESTA PARIZQ operaciones:val1 COMA operaciones:val2 PARDER {: RESULT = Util.Operations.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MULTI PARIZQ operaciones:val1 COMA operaciones:val2 PARDER {: RESULT = Util.Operations.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | DIV PARIZQ operaciones:val1 COMA operaciones:val2 PARDER {: RESULT = Util.Operations.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MOD PARIZQ operaciones:val1 COMA operaciones:val2 PARDER {: RESULT = Util.Operations.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | SUMA PARIZQ valor:val1 COMA operaciones:val2 PARDER {: RESULT = Util.Operations.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | RESTA PARIZQ valor:val1 COMA operaciones:val2 PARDER {: RESULT = Util.Operations.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MULTI PARIZQ valor:val1 COMA operaciones:val2 PARDER {: RESULT = Util.Operations.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | DIV PARIZQ valor:val1 COMA operaciones:val2 PARDER {: RESULT = Util.Operations.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MOD PARIZQ valor:val1 COMA operaciones:val2 PARDER {: RESULT = Util.Operations.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | SUMA PARIZQ operaciones:val1 COMA valor:val2 PARDER {: RESULT = Util.Operations.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | RESTA PARIZQ operaciones:val1 COMA valor:val2 PARDER {: RESULT = Util.Operations.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MULTI PARIZQ operaciones:val1 COMA valor:val2 PARDER {: RESULT = Util.Operations.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | DIV PARIZQ operaciones:val1 COMA valor:val2 PARDER {: RESULT = Util.Operations.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MOD PARIZQ operaciones:val1 COMA valor:val2 PARDER {: RESULT = Util.Operations.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | SUMA PARIZQ valor:val1 COMA valor:val2 PARDER {: RESULT = Util.Operations.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | RESTA PARIZQ valor:val1 COMA valor:val2 PARDER {: RESULT = Util.Operations.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MULTI PARIZQ valor:val1 COMA valor:val2 PARDER {: RESULT = Util.Operations.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | DIV PARIZQ valor:val1 COMA valor:val2 PARDER {: RESULT = Util.Operations.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
            | MOD PARIZQ valor:val1 COMA valor:val2 PARDER {: RESULT = Util.Operations.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));:}
;


//utilizado en las operaciones y funciones cuando solo se quieren datos simples sin anidar

valor ::=ENTERO:val {: RESULT = val.toString(); :}
        | ID: val {: RESULT = Util.Instruction.tablaVariables.get(val); :}
        |funciones:val {: RESULT = val.toString(); :}
       
;

//Para la impresion de los datos simples

imp ::= ENTERO:val COMA  imp:resto
                {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               :}
        |CADENA:val COMA imp:resto
                {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               :}
        | ID:val COMA imp:resto
                {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst((String)Util.Instruction.tablaVariables.get(val)); 
                   RESULT = resultado;
               :}

        

        |funciones:val COMA imp:resto
               {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               :}
        |operaciones:val COMA imp:resto
               {:
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               :}

        |ENTERO:val
               {:
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               :}
        |CADENA:val
               {:
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               :}
        | ID:val
               {:
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add((String)Util.Instruction.tablaVariables.get(val)); 
                   RESULT = resultado;
               :}
        |funciones:val
               {:
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               :}
        |operaciones:val 
               {:
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               :}
;


               

