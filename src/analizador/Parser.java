
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\004\000" +
    "\002\011\010\000\002\011\010\000\002\011\010\000\002" +
    "\011\010\000\002\017\017\000\002\017\015\000\002\017" +
    "\015\000\002\017\017\000\002\017\015\000\002\017\015" +
    "\000\002\017\015\000\002\017\014\000\002\017\012\000" +
    "\002\017\014\000\002\017\016\000\002\017\014\000\002" +
    "\017\014\000\002\017\014\000\002\017\006\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\012\012" +
    "\000\002\012\015\000\002\013\015\000\002\013\017\000" +
    "\002\013\017\000\002\013\015\000\002\013\021\000\002" +
    "\013\017\000\002\013\015\000\002\013\015\000\002\010" +
    "\010\000\002\010\010\000\002\010\010\000\002\010\010" +
    "\000\002\010\010\000\002\010\010\000\002\010\006\000" +
    "\002\010\006\000\002\010\006\000\002\010\006\000\002" +
    "\010\006\000\002\010\006\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\016\003\000\002\016\005\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\010\000\002\007" +
    "\010\000\002\007\010\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\007\010\000" +
    "\002\007\010\000\002\007\010\000\002\007\010\000\002" +
    "\007\010\000\002\007\010\000\002\007\010\000\002\007" +
    "\010\000\002\007\010\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0170\000\004\025\005\001\002\000\004\002\u0172\001" +
    "\002\000\036\003\015\017\031\033\010\042\026\043\020" +
    "\044\030\045\024\046\025\047\017\051\012\053\014\062" +
    "\027\067\023\071\006\001\002\000\004\006\u016d\001\002" +
    "\000\040\003\ufffb\017\ufffb\026\ufffb\033\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\051\ufffb\053\ufffb" +
    "\062\ufffb\067\ufffb\071\ufffb\001\002\000\004\021\u014e\001" +
    "\002\000\040\003\ufffe\017\ufffe\026\ufffe\033\ufffe\042\ufffe" +
    "\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\051\ufffe\053" +
    "\ufffe\062\ufffe\067\ufffe\071\ufffe\001\002\000\004\021\u012c" +
    "\001\002\000\040\003\ufffd\017\ufffd\026\ufffd\033\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\051\ufffd" +
    "\053\ufffd\062\ufffd\067\ufffd\071\ufffd\001\002\000\004\006" +
    "\u0127\001\002\000\004\007\u0126\001\002\000\040\003\ufffc" +
    "\017\ufffc\026\ufffc\033\ufffc\042\ufffc\043\ufffc\044\ufffc\045" +
    "\ufffc\046\ufffc\047\ufffc\051\ufffc\053\ufffc\062\ufffc\067\ufffc" +
    "\071\ufffc\001\002\000\004\006\u011f\001\002\000\004\006" +
    "\u0118\001\002\000\040\003\ufffa\017\ufffa\026\ufffa\033\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\051" +
    "\ufffa\053\ufffa\062\ufffa\067\ufffa\071\ufffa\001\002\000\040" +
    "\003\015\017\031\026\u0117\033\010\042\026\043\020\044" +
    "\030\045\024\046\025\047\017\051\012\053\014\062\027" +
    "\067\023\071\006\001\002\000\004\006\u0111\001\002\000" +
    "\004\006\u010a\001\002\000\004\006\u0103\001\002\000\004" +
    "\006\374\001\002\000\004\006\223\001\002\000\004\006" +
    "\203\001\002\000\004\021\032\001\002\000\006\020\033" +
    "\030\034\001\002\000\004\021\054\001\002\000\004\031" +
    "\035\001\002\000\004\032\036\001\002\000\004\021\037" +
    "\001\002\000\004\021\040\001\002\000\004\012\041\001" +
    "\002\000\004\022\042\001\002\000\004\024\043\001\002" +
    "\000\014\010\047\011\051\012\044\013\046\034\045\001" +
    "\002\000\014\005\uffc1\014\uffc1\023\uffc1\024\uffc1\032\uffc1" +
    "\001\002\000\014\005\uffc0\014\uffc0\023\uffc0\024\uffc0\032" +
    "\uffc0\001\002\000\014\005\uffc2\014\uffc2\023\uffc2\024\uffc2" +
    "\032\uffc2\001\002\000\014\005\uffc4\014\uffc4\023\uffc4\024" +
    "\uffc4\032\uffc4\001\002\000\004\023\052\001\002\000\014" +
    "\005\uffc3\014\uffc3\023\uffc3\024\uffc3\032\uffc3\001\002\000" +
    "\004\007\053\001\002\000\040\003\uffdf\017\uffdf\026\uffdf" +
    "\033\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\051\uffdf\053\uffdf\062\uffdf\067\uffdf\071\uffdf\001\002" +
    "\000\004\021\055\001\002\000\004\012\056\001\002\000" +
    "\004\022\057\001\002\000\004\024\060\001\002\000\042" +
    "\010\047\011\051\012\044\013\046\034\045\035\063\036" +
    "\070\037\065\040\067\041\061\042\026\043\020\044\030" +
    "\045\024\046\025\047\017\001\002\000\004\006\166\001" +
    "\002\000\004\023\164\001\002\000\004\006\147\001\002" +
    "\000\004\023\145\001\002\000\004\006\130\001\002\000" +
    "\004\023\126\001\002\000\004\006\111\001\002\000\004" +
    "\006\071\001\002\000\034\010\072\012\074\035\063\036" +
    "\070\037\065\040\067\041\061\042\026\043\020\044\030" +
    "\045\024\046\025\047\017\001\002\000\006\005\uffab\014" +
    "\uffab\001\002\000\004\014\104\001\002\000\006\005\uffaa" +
    "\014\uffaa\001\002\000\006\005\uffa9\014\uffa9\001\002\000" +
    "\004\014\077\001\002\000\034\010\072\012\074\035\063" +
    "\036\070\037\065\040\067\041\061\042\026\043\020\044" +
    "\030\045\024\046\025\047\017\001\002\000\004\005\103" +
    "\001\002\000\004\005\102\001\002\000\012\005\uffbe\014" +
    "\uffbe\023\uffbe\032\uffbe\001\002\000\012\005\uffb4\014\uffb4" +
    "\023\uffb4\032\uffb4\001\002\000\034\010\072\012\074\035" +
    "\063\036\070\037\065\040\067\041\061\042\026\043\020" +
    "\044\030\045\024\046\025\047\017\001\002\000\004\005" +
    "\110\001\002\000\004\005\107\001\002\000\012\005\uffb9" +
    "\014\uffb9\023\uffb9\032\uffb9\001\002\000\012\005\uffaf\014" +
    "\uffaf\023\uffaf\032\uffaf\001\002\000\034\010\072\012\074" +
    "\035\063\036\070\037\065\040\067\041\061\042\026\043" +
    "\020\044\030\045\024\046\025\047\017\001\002\000\004" +
    "\014\121\001\002\000\004\014\114\001\002\000\034\010" +
    "\072\012\074\035\063\036\070\037\065\040\067\041\061" +
    "\042\026\043\020\044\030\045\024\046\025\047\017\001" +
    "\002\000\004\005\120\001\002\000\004\005\117\001\002" +
    "\000\012\005\uffbc\014\uffbc\023\uffbc\032\uffbc\001\002\000" +
    "\012\005\uffb2\014\uffb2\023\uffb2\032\uffb2\001\002\000\034" +
    "\010\072\012\074\035\063\036\070\037\065\040\067\041" +
    "\061\042\026\043\020\044\030\045\024\046\025\047\017" +
    "\001\002\000\004\005\125\001\002\000\004\005\124\001" +
    "\002\000\012\005\uffb7\014\uffb7\023\uffb7\032\uffb7\001\002" +
    "\000\012\005\uffad\014\uffad\023\uffad\032\uffad\001\002\000" +
    "\004\007\127\001\002\000\040\003\uffda\017\uffda\026\uffda" +
    "\033\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\uffda\051\uffda\053\uffda\062\uffda\067\uffda\071\uffda\001\002" +
    "\000\034\010\072\012\074\035\063\036\070\037\065\040" +
    "\067\041\061\042\026\043\020\044\030\045\024\046\025" +
    "\047\017\001\002\000\004\014\140\001\002\000\004\014" +
    "\133\001\002\000\034\010\072\012\074\035\063\036\070" +
    "\037\065\040\067\041\061\042\026\043\020\044\030\045" +
    "\024\046\025\047\017\001\002\000\004\005\137\001\002" +
    "\000\004\005\136\001\002\000\012\005\uffbd\014\uffbd\023" +
    "\uffbd\032\uffbd\001\002\000\012\005\uffb3\014\uffb3\023\uffb3" +
    "\032\uffb3\001\002\000\034\010\072\012\074\035\063\036" +
    "\070\037\065\040\067\041\061\042\026\043\020\044\030" +
    "\045\024\046\025\047\017\001\002\000\004\005\144\001" +
    "\002\000\004\005\143\001\002\000\012\005\uffb8\014\uffb8" +
    "\023\uffb8\032\uffb8\001\002\000\012\005\uffae\014\uffae\023" +
    "\uffae\032\uffae\001\002\000\004\007\146\001\002\000\040" +
    "\003\uffe0\017\uffe0\026\uffe0\033\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0\053\uffe0\062\uffe0" +
    "\067\uffe0\071\uffe0\001\002\000\034\010\072\012\074\035" +
    "\063\036\070\037\065\040\067\041\061\042\026\043\020" +
    "\044\030\045\024\046\025\047\017\001\002\000\004\014" +
    "\157\001\002\000\004\014\152\001\002\000\034\010\072" +
    "\012\074\035\063\036\070\037\065\040\067\041\061\042" +
    "\026\043\020\044\030\045\024\046\025\047\017\001\002" +
    "\000\004\005\156\001\002\000\004\005\155\001\002\000" +
    "\012\005\uffbf\014\uffbf\023\uffbf\032\uffbf\001\002\000\012" +
    "\005\uffb5\014\uffb5\023\uffb5\032\uffb5\001\002\000\034\010" +
    "\072\012\074\035\063\036\070\037\065\040\067\041\061" +
    "\042\026\043\020\044\030\045\024\046\025\047\017\001" +
    "\002\000\004\005\163\001\002\000\004\005\162\001\002" +
    "\000\012\005\uffba\014\uffba\023\uffba\032\uffba\001\002\000" +
    "\012\005\uffb0\014\uffb0\023\uffb0\032\uffb0\001\002\000\004" +
    "\007\165\001\002\000\040\003\uffd9\017\uffd9\026\uffd9\033" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\051\uffd9\053\uffd9\062\uffd9\067\uffd9\071\uffd9\001\002\000" +
    "\034\010\072\012\074\035\063\036\070\037\065\040\067" +
    "\041\061\042\026\043\020\044\030\045\024\046\025\047" +
    "\017\001\002\000\004\014\176\001\002\000\004\014\171" +
    "\001\002\000\034\010\072\012\074\035\063\036\070\037" +
    "\065\040\067\041\061\042\026\043\020\044\030\045\024" +
    "\046\025\047\017\001\002\000\004\005\175\001\002\000" +
    "\004\005\174\001\002\000\012\005\uffbb\014\uffbb\023\uffbb" +
    "\032\uffbb\001\002\000\012\005\uffb1\014\uffb1\023\uffb1\032" +
    "\uffb1\001\002\000\034\010\072\012\074\035\063\036\070" +
    "\037\065\040\067\041\061\042\026\043\020\044\030\045" +
    "\024\046\025\047\017\001\002\000\004\005\202\001\002" +
    "\000\004\005\201\001\002\000\012\005\uffb6\014\uffb6\023" +
    "\uffb6\032\uffb6\001\002\000\012\005\uffac\014\uffac\023\uffac" +
    "\032\uffac\001\002\000\016\010\047\011\051\012\044\013" +
    "\046\031\204\034\045\001\002\000\042\010\047\011\051" +
    "\012\044\013\046\034\045\035\063\036\070\037\065\040" +
    "\067\041\061\042\026\043\020\044\030\045\024\046\025" +
    "\047\017\001\002\000\004\005\206\001\002\000\050\003" +
    "\uffd0\005\uffd0\014\uffd0\017\uffd0\023\uffd0\026\uffd0\032\uffd0" +
    "\033\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\051\uffd0\053\uffd0\062\uffd0\067\uffd0\071\uffd0\001\002" +
    "\000\010\014\221\023\uffc7\032\uffc7\001\002\000\010\014" +
    "\217\023\uffc9\032\uffc9\001\002\000\004\032\215\001\002" +
    "\000\010\014\213\023\uffc8\032\uffc8\001\002\000\042\010" +
    "\047\011\051\012\044\013\046\034\045\035\063\036\070" +
    "\037\065\040\067\041\061\042\026\043\020\044\030\045" +
    "\024\046\025\047\017\001\002\000\006\023\uffcb\032\uffcb" +
    "\001\002\000\004\005\216\001\002\000\050\003\uffd6\005" +
    "\uffd6\014\uffd6\017\uffd6\023\uffd6\026\uffd6\032\uffd6\033\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\051" +
    "\uffd6\053\uffd6\062\uffd6\067\uffd6\071\uffd6\001\002\000\042" +
    "\010\047\011\051\012\044\013\046\034\045\035\063\036" +
    "\070\037\065\040\067\041\061\042\026\043\020\044\030" +
    "\045\024\046\025\047\017\001\002\000\006\023\uffcc\032" +
    "\uffcc\001\002\000\042\010\047\011\051\012\044\013\046" +
    "\034\045\035\063\036\070\037\065\040\067\041\061\042" +
    "\026\043\020\044\030\045\024\046\025\047\017\001\002" +
    "\000\006\023\uffca\032\uffca\001\002\000\022\054\224\055" +
    "\230\056\232\057\226\063\227\064\225\065\234\066\233" +
    "\001\002\000\004\021\362\001\002\000\004\021\350\001" +
    "\002\000\012\053\337\062\335\067\334\071\336\001\002" +
    "\000\004\021\320\001\002\000\004\021\301\001\002\000" +
    "\004\005\276\001\002\000\004\021\261\001\002\000\004" +
    "\021\247\001\002\000\004\021\235\001\002\000\004\021" +
    "\236\001\002\000\004\030\237\001\002\000\004\031\240" +
    "\001\002\000\004\032\241\001\002\000\004\015\242\001" +
    "\002\000\014\010\047\011\051\012\044\013\046\034\045" +
    "\001\002\000\004\023\244\001\002\000\004\007\245\001" +
    "\002\000\024\005\uffe8\054\224\055\230\056\232\057\226" +
    "\063\227\064\225\065\234\066\233\001\002\000\004\005" +
    "\uffef\001\002\000\004\021\250\001\002\000\004\030\251" +
    "\001\002\000\004\031\252\001\002\000\004\032\253\001" +
    "\002\000\004\015\254\001\002\000\014\010\047\011\051" +
    "\012\044\013\046\034\045\001\002\000\004\023\256\001" +
    "\002\000\004\007\257\001\002\000\024\005\uffe7\054\224" +
    "\055\230\056\232\057\226\063\227\064\225\065\234\066" +
    "\233\001\002\000\004\005\uffee\001\002\000\004\021\262" +
    "\001\002\000\004\020\263\001\002\000\004\015\264\001" +
    "\002\000\044\010\047\011\051\012\044\013\046\031\266" +
    "\034\045\035\063\036\070\037\065\040\067\041\061\042" +
    "\026\043\020\044\030\045\024\046\025\047\017\001\002" +
    "\000\004\023\274\001\002\000\042\010\047\011\051\012" +
    "\044\013\046\034\045\035\063\036\070\037\065\040\067" +
    "\041\061\042\026\043\020\044\030\045\024\046\025\047" +
    "\017\001\002\000\004\032\270\001\002\000\004\023\271" +
    "\001\002\000\004\007\272\001\002\000\022\054\224\055" +
    "\230\056\232\057\226\063\227\064\225\065\234\066\233" +
    "\001\002\000\004\005\ufff3\001\002\000\004\007\275\001" +
    "\002\000\004\005\uffec\001\002\000\004\023\277\001\002" +
    "\000\004\007\300\001\002\000\040\003\ufff7\017\ufff7\026" +
    "\ufff7\033\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\051\ufff7\053\ufff7\062\ufff7\067\ufff7\071\ufff7\001" +
    "\002\000\004\021\302\001\002\000\004\030\303\001\002" +
    "\000\004\031\304\001\002\000\004\032\305\001\002\000" +
    "\004\015\306\001\002\000\044\010\047\011\051\012\044" +
    "\013\046\031\310\034\045\035\063\036\070\037\065\040" +
    "\067\041\061\042\026\043\020\044\030\045\024\046\025" +
    "\047\017\001\002\000\004\023\316\001\002\000\042\010" +
    "\047\011\051\012\044\013\046\034\045\035\063\036\070" +
    "\037\065\040\067\041\061\042\026\043\020\044\030\045" +
    "\024\046\025\047\017\001\002\000\004\032\312\001\002" +
    "\000\004\023\313\001\002\000\004\007\314\001\002\000" +
    "\022\054\224\055\230\056\232\057\226\063\227\064\225" +
    "\065\234\066\233\001\002\000\004\005\ufff4\001\002\000" +
    "\004\007\317\001\002\000\004\005\uffed\001\002\000\004" +
    "\021\321\001\002\000\004\030\322\001\002\000\004\031" +
    "\323\001\002\000\004\032\324\001\002\000\004\015\325" +
    "\001\002\000\004\031\326\001\002\000\042\010\047\011" +
    "\051\012\044\013\046\034\045\035\063\036\070\037\065" +
    "\040\067\041\061\042\026\043\020\044\030\045\024\046" +
    "\025\047\017\001\002\000\004\032\330\001\002\000\004" +
    "\023\331\001\002\000\004\007\332\001\002\000\024\005" +
    "\uffea\054\224\055\230\056\232\057\226\063\227\064\225" +
    "\065\234\066\233\001\002\000\004\005\ufff1\001\002\000" +
    "\004\023\346\001\002\000\004\023\344\001\002\000\004" +
    "\023\342\001\002\000\004\023\340\001\002\000\004\007" +
    "\341\001\002\000\004\005\uffe5\001\002\000\004\007\343" +
    "\001\002\000\004\005\uffe3\001\002\000\004\007\345\001" +
    "\002\000\004\005\uffe6\001\002\000\004\007\347\001\002" +
    "\000\004\005\uffe4\001\002\000\004\021\351\001\002\000" +
    "\004\020\352\001\002\000\004\015\353\001\002\000\004" +
    "\031\354\001\002\000\042\010\047\011\051\012\044\013" +
    "\046\034\045\035\063\036\070\037\065\040\067\041\061" +
    "\042\026\043\020\044\030\045\024\046\025\047\017\001" +
    "\002\000\004\032\356\001\002\000\004\023\357\001\002" +
    "\000\004\007\360\001\002\000\024\005\uffe9\054\224\055" +
    "\230\056\232\057\226\063\227\064\225\065\234\066\233" +
    "\001\002\000\004\005\ufff0\001\002\000\004\021\363\001" +
    "\002\000\004\030\364\001\002\000\004\031\365\001\002" +
    "\000\004\032\366\001\002\000\004\015\367\001\002\000" +
    "\014\010\047\011\051\012\044\013\046\034\045\001\002" +
    "\000\004\023\371\001\002\000\004\007\372\001\002\000" +
    "\024\005\uffeb\054\224\055\230\056\232\057\226\063\227" +
    "\064\225\065\234\066\233\001\002\000\004\005\ufff2\001" +
    "\002\000\016\010\047\011\051\012\044\013\046\031\375" +
    "\034\045\001\002\000\042\010\047\011\051\012\044\013" +
    "\046\034\045\035\063\036\070\037\065\040\067\041\061" +
    "\042\026\043\020\044\030\045\024\046\025\047\017\001" +
    "\002\000\004\005\377\001\002\000\050\003\uffd2\005\uffd2" +
    "\014\uffd2\017\uffd2\023\uffd2\026\uffd2\032\uffd2\033\uffd2\042" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2" +
    "\053\uffd2\062\uffd2\067\uffd2\071\uffd2\001\002\000\004\032" +
    "\u0101\001\002\000\004\005\u0102\001\002\000\050\003\uffd8" +
    "\005\uffd8\014\uffd8\017\uffd8\023\uffd8\026\uffd8\032\uffd8\033" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\051\uffd8\053\uffd8\062\uffd8\067\uffd8\071\uffd8\001\002\000" +
    "\016\010\047\011\051\012\044\013\046\031\u0104\034\045" +
    "\001\002\000\042\010\047\011\051\012\044\013\046\034" +
    "\045\035\063\036\070\037\065\040\067\041\061\042\026" +
    "\043\020\044\030\045\024\046\025\047\017\001\002\000" +
    "\004\005\u0106\001\002\000\050\003\uffce\005\uffce\014\uffce" +
    "\017\uffce\023\uffce\026\uffce\032\uffce\033\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\051\uffce\053\uffce" +
    "\062\uffce\067\uffce\071\uffce\001\002\000\004\032\u0108\001" +
    "\002\000\004\005\u0109\001\002\000\050\003\uffd4\005\uffd4" +
    "\014\uffd4\017\uffd4\023\uffd4\026\uffd4\032\uffd4\033\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4" +
    "\053\uffd4\062\uffd4\067\uffd4\071\uffd4\001\002\000\016\010" +
    "\047\011\051\012\044\013\046\031\u010b\034\045\001\002" +
    "\000\042\010\047\011\051\012\044\013\046\034\045\035" +
    "\063\036\070\037\065\040\067\041\061\042\026\043\020" +
    "\044\030\045\024\046\025\047\017\001\002\000\004\005" +
    "\u010d\001\002\000\050\003\uffcf\005\uffcf\014\uffcf\017\uffcf" +
    "\023\uffcf\026\uffcf\032\uffcf\033\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\051\uffcf\053\uffcf\062\uffcf" +
    "\067\uffcf\071\uffcf\001\002\000\004\032\u010f\001\002\000" +
    "\004\005\u0110\001\002\000\050\003\uffd5\005\uffd5\014\uffd5" +
    "\017\uffd5\023\uffd5\026\uffd5\032\uffd5\033\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5\053\uffd5" +
    "\062\uffd5\067\uffd5\071\uffd5\001\002\000\022\054\224\055" +
    "\230\056\232\057\226\063\227\064\225\065\234\066\233" +
    "\001\002\000\004\005\u0113\001\002\000\004\023\u0114\001" +
    "\002\000\004\007\u0115\001\002\000\040\003\ufff6\017\ufff6" +
    "\026\ufff6\033\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\047\ufff6\051\ufff6\053\ufff6\062\ufff6\067\ufff6\071\ufff6" +
    "\001\002\000\040\003\uffff\017\uffff\026\uffff\033\uffff\042" +
    "\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\051\uffff" +
    "\053\uffff\062\uffff\067\uffff\071\uffff\001\002\000\004\002" +
    "\000\001\002\000\016\010\047\011\051\012\044\013\046" +
    "\031\u0119\034\045\001\002\000\042\010\047\011\051\012" +
    "\044\013\046\034\045\035\063\036\070\037\065\040\067" +
    "\041\061\042\026\043\020\044\030\045\024\046\025\047" +
    "\017\001\002\000\004\005\u011b\001\002\000\050\003\uffd1" +
    "\005\uffd1\014\uffd1\017\uffd1\023\uffd1\026\uffd1\032\uffd1\033" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\051\uffd1\053\uffd1\062\uffd1\067\uffd1\071\uffd1\001\002\000" +
    "\004\032\u011d\001\002\000\004\005\u011e\001\002\000\050" +
    "\003\uffd7\005\uffd7\014\uffd7\017\uffd7\023\uffd7\026\uffd7\032" +
    "\uffd7\033\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\051\uffd7\053\uffd7\062\uffd7\067\uffd7\071\uffd7\001" +
    "\002\000\016\010\047\011\051\012\044\013\046\031\u0120" +
    "\034\045\001\002\000\042\010\047\011\051\012\044\013" +
    "\046\034\045\035\063\036\070\037\065\040\067\041\061" +
    "\042\026\043\020\044\030\045\024\046\025\047\017\001" +
    "\002\000\004\005\u0122\001\002\000\050\003\uffcd\005\uffcd" +
    "\014\uffcd\017\uffcd\023\uffcd\026\uffcd\032\uffcd\033\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\051\uffcd" +
    "\053\uffcd\062\uffcd\067\uffcd\071\uffcd\001\002\000\004\032" +
    "\u0124\001\002\000\004\005\u0125\001\002\000\050\003\uffd3" +
    "\005\uffd3\014\uffd3\017\uffd3\023\uffd3\026\uffd3\032\uffd3\033" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\051\uffd3\053\uffd3\062\uffd3\067\uffd3\071\uffd3\001\002\000" +
    "\040\003\ufff9\017\ufff9\026\ufff9\033\ufff9\042\ufff9\043\ufff9" +
    "\044\ufff9\045\ufff9\046\ufff9\047\ufff9\051\ufff9\053\ufff9\062" +
    "\ufff9\067\ufff9\071\ufff9\001\002\000\022\054\224\055\230" +
    "\056\232\057\226\063\227\064\225\065\234\066\233\001" +
    "\002\000\004\005\u0129\001\002\000\004\023\u012a\001\002" +
    "\000\004\007\u012b\001\002\000\040\003\ufff8\017\ufff8\026" +
    "\ufff8\033\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\047\ufff8\051\ufff8\053\ufff8\062\ufff8\067\ufff8\071\ufff8\001" +
    "\002\000\004\021\u012d\001\002\000\006\050\u012e\052\u012f" +
    "\001\002\000\004\015\u013b\001\002\000\004\015\u0130\001" +
    "\002\000\014\010\047\011\051\012\044\013\046\034\045" +
    "\001\002\000\004\024\u0132\001\002\000\004\027\u0133\001" +
    "\002\000\006\031\u0135\034\u0134\001\002\000\004\023\uffc6" +
    "\001\002\000\042\010\047\011\051\012\044\013\046\034" +
    "\045\035\063\036\070\037\065\040\067\041\061\042\026" +
    "\043\020\044\030\045\024\046\025\047\017\001\002\000" +
    "\004\023\u0137\001\002\000\004\007\u0138\001\002\000\040" +
    "\003\uffe1\017\uffe1\026\uffe1\033\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\051\uffe1\053\uffe1\062\uffe1" +
    "\067\uffe1\071\uffe1\001\002\000\004\032\u013a\001\002\000" +
    "\004\023\uffc5\001\002\000\036\010\u013e\011\u013c\012\u013f" +
    "\035\063\036\070\037\065\040\067\041\061\042\026\043" +
    "\020\044\030\045\024\046\025\047\017\001\002\000\006" +
    "\014\u014c\023\uffa2\001\002\000\004\023\u014a\001\002\000" +
    "\006\014\u0148\023\uffa3\001\002\000\006\014\u0146\023\uffa1" +
    "\001\002\000\006\014\u0144\023\uffa0\001\002\000\006\014" +
    "\u0142\023\uff9f\001\002\000\036\010\u013e\011\u013c\012\u013f" +
    "\035\063\036\070\037\065\040\067\041\061\042\026\043" +
    "\020\044\030\045\024\046\025\047\017\001\002\000\004" +
    "\023\uffa4\001\002\000\036\010\u013e\011\u013c\012\u013f\035" +
    "\063\036\070\037\065\040\067\041\061\042\026\043\020" +
    "\044\030\045\024\046\025\047\017\001\002\000\004\023" +
    "\uffa5\001\002\000\036\010\u013e\011\u013c\012\u013f\035\063" +
    "\036\070\037\065\040\067\041\061\042\026\043\020\044" +
    "\030\045\024\046\025\047\017\001\002\000\004\023\uffa6" +
    "\001\002\000\036\010\u013e\011\u013c\012\u013f\035\063\036" +
    "\070\037\065\040\067\041\061\042\026\043\020\044\030" +
    "\045\024\046\025\047\017\001\002\000\004\023\uffa8\001" +
    "\002\000\004\007\u014b\001\002\000\040\003\uffe2\017\uffe2" +
    "\026\uffe2\033\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\051\uffe2\053\uffe2\062\uffe2\067\uffe2\071\uffe2" +
    "\001\002\000\036\010\u013e\011\u013c\012\u013f\035\063\036" +
    "\070\037\065\040\067\041\061\042\026\043\020\044\030" +
    "\045\024\046\025\047\017\001\002\000\004\023\uffa7\001" +
    "\002\000\006\020\u014f\030\u0150\001\002\000\004\021\u0160" +
    "\001\002\000\004\031\u0151\001\002\000\004\032\u0152\001" +
    "\002\000\004\021\u0153\001\002\000\004\021\u0154\001\002" +
    "\000\004\034\u0155\001\002\000\004\022\u0156\001\002\000" +
    "\004\024\u0157\001\002\000\016\010\047\011\051\012\044" +
    "\013\046\031\u0158\034\045\001\002\000\042\010\047\011" +
    "\051\012\044\013\046\034\045\035\063\036\070\037\065" +
    "\040\067\041\061\042\026\043\020\044\030\045\024\046" +
    "\025\047\017\001\002\000\004\023\u015a\001\002\000\004" +
    "\007\u015b\001\002\000\040\003\uffdb\017\uffdb\026\uffdb\033" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\051\uffdb\053\uffdb\062\uffdb\067\uffdb\071\uffdb\001\002\000" +
    "\004\032\u015d\001\002\000\004\023\u015e\001\002\000\004" +
    "\007\u015f\001\002\000\040\003\uffdc\017\uffdc\026\uffdc\033" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\051\uffdc\053\uffdc\062\uffdc\067\uffdc\071\uffdc\001\002\000" +
    "\004\021\u0161\001\002\000\004\034\u0162\001\002\000\004" +
    "\022\u0163\001\002\000\004\024\u0164\001\002\000\016\010" +
    "\047\011\051\012\044\013\046\031\u0165\034\045\001\002" +
    "\000\042\010\047\011\051\012\044\013\046\034\045\035" +
    "\063\036\070\037\065\040\067\041\061\042\026\043\020" +
    "\044\030\045\024\046\025\047\017\001\002\000\004\023" +
    "\u0167\001\002\000\004\007\u0168\001\002\000\040\003\uffdd" +
    "\017\uffdd\026\uffdd\033\uffdd\042\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\051\uffdd\053\uffdd\062\uffdd\067\uffdd" +
    "\071\uffdd\001\002\000\004\032\u016a\001\002\000\004\023" +
    "\u016b\001\002\000\004\007\u016c\001\002\000\040\003\uffde" +
    "\017\uffde\026\uffde\033\uffde\042\uffde\043\uffde\044\uffde\045" +
    "\uffde\046\uffde\047\uffde\051\uffde\053\uffde\062\uffde\067\uffde" +
    "\071\uffde\001\002\000\022\054\224\055\230\056\232\057" +
    "\226\063\227\064\225\065\234\066\233\001\002\000\004" +
    "\005\u016f\001\002\000\004\023\u0170\001\002\000\004\007" +
    "\u0171\001\002\000\040\003\ufff5\017\ufff5\026\ufff5\033\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\051" +
    "\ufff5\053\ufff5\062\ufff5\067\ufff5\071\ufff5\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0170\000\004\002\003\001\001\000\002\001\001\000" +
    "\016\003\021\005\010\010\006\011\020\012\012\013\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\u0115\010\006\011\020\012\012\013\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\063\007\065\010\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\075\010\074\014\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\100\010\074" +
    "\014\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\105\010\074" +
    "\014\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\112\010\074" +
    "\014\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\115\010\074\014\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\122\010\074\014\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\131\010\074" +
    "\014\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\134\010\074\014\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\141\010\074\014\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\150\010\074" +
    "\014\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\153\010\074\014\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\160\010\074\014\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\167\010\074" +
    "\014\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\172\010\074\014\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\177\010\074\014\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\204\001\001\000\012\004\210\006\207\007\211" +
    "\010\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\213\006\207\007\211\010\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\217\006\207\007\211\010\206\001\001\000" +
    "\002\001\001\000\012\004\221\006\207\007\211\010\206" +
    "\001\001\000\002\001\001\000\004\017\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\264\006\207\007\211" +
    "\010\206\001\001\000\002\001\001\000\012\004\266\006" +
    "\207\007\211\010\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\306\006\207\007\211\010" +
    "\206\001\001\000\002\001\001\000\012\004\310\006\207" +
    "\007\211\010\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\326\006" +
    "\207\007\211\010\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\332\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\354\006\207\007\211\010\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\360\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\367\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\372\001\001\000\002" +
    "\001\001\000\004\006\375\001\001\000\012\004\377\006" +
    "\207\007\211\010\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u0104\001\001\000\012\004\u0106\006\207" +
    "\007\211\010\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u010b\001\001\000\012\004\u010d\006\207\007" +
    "\211\010\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\u0111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0119\001\001\000\012\004\u011b" +
    "\006\207\007\211\010\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0120\001\001\000\012\004\u0122\006" +
    "\207\007\211\010\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\u0127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u0130\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u0135\001\001\000\002" +
    "\001\001\000\012\004\u0138\006\207\007\211\010\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\u0140\010" +
    "\u013f\015\u013c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\u0140\010\u013f\015\u0142\001\001" +
    "\000\002\001\001\000\010\007\u0140\010\u013f\015\u0144\001" +
    "\001\000\002\001\001\000\010\007\u0140\010\u013f\015\u0146" +
    "\001\001\000\002\001\001\000\010\007\u0140\010\u013f\015" +
    "\u0148\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\u0140\010\u013f\015\u014c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u0158\001\001\000\012\004\u015b\006\207\007" +
    "\211\010\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u0165\001\001\000\012\004\u0168\006\207\007\211\010\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\u016d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            if(s.value != null)
                Util.Reports.agregarTokenErr("No se espera: "+ s.value, "error sintactico", s.right, s.left);  
                System.err.println("Error Sintactico: no se espera "+ s.value.toString() + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM listainstr ENDPROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listainstr ::= listainstr instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listainstr ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= printN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= graficas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= error PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // graficas ::= GRAPHPIE PARIZQ parametros PARDER END PYC 
            {
              Object RESULT =null;
		 Graphics.Graphics.Pie(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // graficas ::= GRAPHBAR PARIZQ parametros PARDER END PYC 
            {
              Object RESULT =null;
		 Graphics.Graphics.Barras(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // graficas ::= GRAPHLINE PARIZQ parametros PARDER END PYC 
            {
              Object RESULT =null;
		 Graphics.Graphics.Linea(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graficas ::= HISTOGRAM PARIZQ parametros PARDER END PYC 
            {
              Object RESULT =null;
		 Graphics.Graphics.Histograma(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficas",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros ::= LABEL DOSP DOSP CHARVAR CORIZQ CORDER IGUAL CORIZQ listaValores CORDER END PYC parametros 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Graphics.Graphics.agregarOActualizar("label", val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros ::= VALUES DOSP DOSP DOUBLEVAR IGUAL CORIZQ listaValores CORDER END PYC parametros 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Graphics.Graphics.agregarOActualizar("values", val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros ::= TITULO DOSP DOSP CHARVAR CORIZQ CORDER IGUAL expresion END PYC parametros 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Graphics.Graphics.agregarOActualizar("titulo", val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros ::= EJEX DOSP DOSP CHARVAR CORIZQ CORDER IGUAL CORIZQ listaValores CORDER END PYC parametros 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Graphics.Graphics.agregarOActualizar("ejeX", val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametros ::= EJEY DOSP DOSP DOUBLEVAR IGUAL CORIZQ listaValores CORDER END PYC parametros 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 Graphics.Graphics.agregarOActualizar("ejeY", val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametros ::= TITX DOSP DOSP CHARVAR CORIZQ CORDER IGUAL expresion END PYC parametros 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Graphics.Graphics.agregarOActualizar("tituloX", val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametros ::= TITY DOSP DOSP CHARVAR CORIZQ CORDER IGUAL expresion END PYC parametros 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Graphics.Graphics.agregarOActualizar("tituloY", val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros ::= LABEL DOSP DOSP CHARVAR CORIZQ CORDER IGUAL listaValores END PYC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Graphics.Graphics.agregarOActualizar("label", val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametros ::= VALUES DOSP DOSP DOUBLEVAR IGUAL listaValores END PYC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Graphics.Graphics.agregarOActualizar("values", val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros ::= TITULO DOSP DOSP CHARVAR CORIZQ CORDER IGUAL expresion END PYC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Graphics.Graphics.agregarOActualizar("titulo", val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros ::= EJEX DOSP DOSP CHARVAR CORIZQ CORDER IGUAL CORIZQ listaValores CORDER END PYC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Graphics.Graphics.agregarOActualizar("ejeX", val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros ::= EJEY DOSP DOSP DOUBLEVAR IGUAL CORIZQ listaValores CORDER END PYC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 Graphics.Graphics.agregarOActualizar("ejeY", val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametros ::= TITX DOSP DOSP CHARVAR CORIZQ CORDER IGUAL expresion END PYC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Graphics.Graphics.agregarOActualizar("tituloX", val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametros ::= TITY DOSP DOSP CHARVAR CORIZQ CORDER IGUAL expresion END PYC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Graphics.Graphics.agregarOActualizar("tituloY", val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros ::= EXEC GRAPHBAR END PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros ::= EXEC GRAPHPIE END PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros ::= EXEC GRAPHLINE END PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros ::= EXEC HISTOGRAM END PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // printN ::= CONSOLE DOSP DOSP PRINT IGUAL imp END PYC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Util.Instruction.Print(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printN",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // printN ::= CONSOLE DOSP DOSP COLUMN IGUAL expresion GUION MAYORQ arrays END PYC 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Util.Instruction.PrintArr(val, var.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printN",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variable ::= VAR DOSP DOUBLEVAR DOSP DOSP ID MENORQ GUION expresion END PYC 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Util.Instruction.tablaVariables.put(var.toString(), val.toString());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variable ::= VAR DOSP CHARVAR CORIZQ CORDER DOSP DOSP ID MENORQ GUION expresion END PYC 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Util.Instruction.tablaVariables.put(var.toString(), val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variable ::= ARR DOSP DOUBLEVAR DOSP DOSP IDARR MENORQ GUION CORIZQ listaValores CORDER END PYC 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Util.Instruction.tablaVariables.put(var.toString(), (LinkedList<Double>)  val); Util.Instruction.mostrarTablaVariables();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variable ::= ARR DOSP DOUBLEVAR DOSP DOSP IDARR MENORQ GUION expresion END PYC 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Util.Instruction.tablaVariables.put(var.toString(), (LinkedList<Double>)  val); Util.Instruction.mostrarTablaVariables();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable ::= ARR DOSP CHARVAR CORIZQ CORDER DOSP DOSP IDARR MENORQ GUION CORIZQ listaValores CORDER END PYC 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Util.Instruction.tablaVariables.put(var.toString(), (LinkedList<String>) val); Util.Instruction.mostrarTablaVariables(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable ::= ARR DOSP CHARVAR CORIZQ CORDER DOSP DOSP IDARR MENORQ GUION expresion END PYC 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Util.Instruction.tablaVariables.put(var.toString(), (LinkedList<String>) val); Util.Instruction.mostrarTablaVariables(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variable ::= VAR DOSP DOUBLEVAR DOSP DOSP ID MENORQ GUION operaciones END PYC 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Util.Instruction.tablaVariables.put(var.toString(), val.toString() ); Util.Instruction.mostrarTablaVariables(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // variable ::= VAR DOSP DOUBLEVAR DOSP DOSP ID MENORQ GUION funciones END PYC 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Util.Instruction.tablaVariables.put(var.toString(), val.toString() ); Util.Instruction.mostrarTablaVariables(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funciones ::= MEDIA PARIZQ CORIZQ listaValores CORDER PARDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Util.Estadistica.Media(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funciones ::= MEDIANA PARIZQ CORIZQ listaValores CORDER PARDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Util.Estadistica.Mediana(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funciones ::= MODA PARIZQ CORIZQ listaValores CORDER PARDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Util.Estadistica.Moda(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funciones ::= VARIANZA PARIZQ CORIZQ listaValores CORDER PARDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Util.Estadistica.Varianza(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funciones ::= MAX PARIZQ CORIZQ listaValores CORDER PARDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Util.Estadistica.Max(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // funciones ::= MIN PARIZQ CORIZQ listaValores CORDER PARDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = Util.Estadistica.Min(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // funciones ::= MEDIA PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Estadistica.Media(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // funciones ::= MEDIANA PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Estadistica.Mediana(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // funciones ::= MODA PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Estadistica.Moda(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // funciones ::= VARIANZA PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Estadistica.Varianza(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // funciones ::= MAX PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Estadistica.Max(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funciones ::= MIN PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Estadistica.Min(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listaValores ::= expresion COMA listaValores 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaValores",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listaValores ::= operaciones COMA listaValores 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaValores",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listaValores ::= funciones COMA listaValores 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaValores",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // listaValores ::= expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaValores",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // listaValores ::= operaciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaValores",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // listaValores ::= funciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaValores",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arrays ::= IDARR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Util.Instruction.tablaVariables.get(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrays",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arrays ::= CORIZQ listaValores CORDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrays",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Util.Instruction.tablaVariables.get(val.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= IDARR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Util.Instruction.tablaVariables.get(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operaciones ::= SUMA PARIZQ operaciones COMA operaciones PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operaciones ::= RESTA PARIZQ operaciones COMA operaciones PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operaciones ::= MULTI PARIZQ operaciones COMA operaciones PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operaciones ::= DIV PARIZQ operaciones COMA operaciones PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operaciones ::= MOD PARIZQ operaciones COMA operaciones PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operaciones ::= SUMA PARIZQ valor COMA operaciones PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operaciones ::= RESTA PARIZQ valor COMA operaciones PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operaciones ::= MULTI PARIZQ valor COMA operaciones PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operaciones ::= DIV PARIZQ valor COMA operaciones PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operaciones ::= MOD PARIZQ valor COMA operaciones PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operaciones ::= SUMA PARIZQ operaciones COMA valor PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operaciones ::= RESTA PARIZQ operaciones COMA valor PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operaciones ::= MULTI PARIZQ operaciones COMA valor PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operaciones ::= DIV PARIZQ operaciones COMA valor PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operaciones ::= MOD PARIZQ operaciones COMA valor PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operaciones ::= SUMA PARIZQ valor COMA valor PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Suma(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operaciones ::= RESTA PARIZQ valor COMA valor PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Resta(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operaciones ::= MULTI PARIZQ valor COMA valor PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Multiplicacion(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operaciones ::= DIV PARIZQ valor COMA valor PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Division(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operaciones ::= MOD PARIZQ valor COMA valor PARDER 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = Util.Operations.Modulo(Double.parseDouble(val1.toString()) , Double.parseDouble(val2.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Util.Instruction.tablaVariables.get(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor ::= funciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // imp ::= ENTERO COMA imp 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // imp ::= CADENA COMA imp 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // imp ::= ID COMA imp 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst((String)Util.Instruction.tablaVariables.get(val)); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // imp ::= funciones COMA imp 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // imp ::= operaciones COMA imp 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int restoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object resto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   LinkedList<String> resultado = (LinkedList<String>) resto;
                   resultado.addFirst(val.toString()); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // imp ::= ENTERO 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // imp ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // imp ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add((String)Util.Instruction.tablaVariables.get(val)); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // imp ::= funciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // imp ::= operaciones 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   LinkedList<String> resultado = new LinkedList<String>();
                   resultado.add(val.toString()); 
                   RESULT = resultado;
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
